github page: http://github.com/Nerdmaster/ruby-irc-yail

Latest stable release's documentation is always at http://ruby-irc-yail.nerdbucket.com/

Net::YAIL is a library built for dealing with IRC communications in Ruby.
This is a project I've been building for about three years, based
originally on the very messy initial release of IRCSocket (back when I first
started, that was the only halfway-decent IRC lib I found).  I've put a lot
of time and effort into cleaning it up to make it better for my own uses,
and now it's almost entirely my code.

Some credit should also be given to Ruby-IRC, as I stole its eventmap.yml
file with very minor modifications.

This library may not be useful to everybody (or anybody other than myself,
for that matter), and Ruby-IRC or another lib may work for your situation
far better than this thing will, but the general design I built here has
just felt more natural to me than the other libraries I've looked at since
I started my project.

=Example Usage

For the nitty-gritty, you can see all this stuff in the Net::YAIL page, as
well as more complete documentation about the system.  For a complete bot,
check out the IRCBot source code.  Below is just a very simple example:

    require 'rubygems'
    require 'net/yail'

    irc = Net::YAIL.new(
      :address    => 'irc.someplace.co.uk',
      :username   => 'Frakking Bot',
      :realname   => 'John Botfrakker',
      :nicknames  => ['bot1', 'bot2', 'bot3']
    )

    irc.prepend_handler :incoming_welcome, proc {|text, args|
      irc.join('#foo')
      return false
    }

    irc.start_listening
    while irc.dead_socket == false
      # Avoid major CPU overuse by taking a very short nap
      sleep 0.05
    end

Now we've built a simple IRC listener that will connect to a (probably
invalid) network, identify itself, and sit around waiting for the welcome
message.  After this has occurred, we join a channel and return false.
