High priority
=============

* Look into problem with ERROR events from server - not being detected properly
* Allow secure connections - also steal from Ruby-IRC :P (sorry pope)
* Maybe rename events from IncomingEvent to IRCServerEvent and OutgoingEvent to IRCClientEvent since
  that actually describes protocol and originator.  Then add CustomEvent for things like :irc_loop.
  * Type also set to :incoming_ and :outgoing_ - change this, too?
    * Type is probably okay - backward-compatibility is FAR easier if left alone, and :incoming_xxx
      can happen with any protocol, especially things like messages, joins, etc.

Version 1.5
===========

API changes:
------------

Deprecating prepend_handler in favor of before_filter, set_callback, and after_filter.
prepend_handler and current event system stay in for a while, but won't last forever....

Related to above: callback and filters no longer have the ability to stop the action
chain.  More akin to a more typical plugin architecture, you have filters that always run, and
as many as you like, then "core" functionality in the callback.  No breaking chain, no stopping
other people's stuff from running.  Callbacks are the core code, the response to an action.  They
should be used to actually handle an event: a bot's "PRIVMSG #channel Hey there, bob" output on
a "bob joins the channel" message.  Filters are more for behind-the-scenes stuff: responding to a
PING, storing stats, logging, manipulating input/output, changing variables (bot's nickname on an
:incoming_nick event), etc.

A plugin could use a filter where one isn't really appropriate, and this may make sense for a
plugin built for a very specific purpose - but the *final* program should be the only thing that
registers the callback, because there can be only one.  When you call set_callback, any previous
callback is lost, PERIOD.

Looking at this like Rails, the callback would be the action, while filters would be... filters.
Looking at it like wordpress, the callback is the core WP code, while the filters are your plugin
actions.  One plugin author shouldn't be breaking another's ability to work.  Unlike Rails,
filters will NOT be able to stop callbacks from happening.  Still considering this as a
possibility, but not sure if I like that for an IRC app.

TODO for this change:
----------------------

* Fix events to give more useful output for :incoming_mode events - at the least, parse out the
  various targets as some kind of hash.  Very complex mode-parsing may be necessary.
  This is one place where API consistency (using .text and such) is less important than usability.
  * Example: For the command ":User!foo@bar.com MODE #bots +bivk-mv Towelie!*@* Doogles foo Towelie"
    * User is banning Towelie!*@*
    * User is setting "+i" to #bots
    * User is giving Doogles +v
    * User is setting channel key to "foo"
    * User is setting "-m" on #bots
    * User is taking away Towelie's voice (-v)
* Make events more like a plugin kind of system.
  * Each event can have pre-callback and post-callback filters.
    * These would include internal things like the handling of changing bot's nick.
    * User could add his own.
    * All filters always run - no breaking the chain!
  * User normally registers a single callback - this is the definitive handler for a given IRC event.
    * New method, set_callback or similar.  Basically overwrites handler for a given event.
    * Deprecate prepend_handler code - give warning to $stderr, even.
  * Callbacks should be used for things like a bot that does a certain action when his name is
    spoken in a channel, for instance - an actual handling of the event.
  * Filters should be used for back-end tasks, like logging, modifying text, storing stats, etc.
  * Outgoing events need to be separate in some way because while they can be filtered, the default
    handling has to remain for them to work!
  * Redo logger and dumbbot when this is ready
  * Build example plugin or two so this functionality isn't meaningless!  Speech filtering, ignore
    (by hostmask regex or nick or whatever), command handler system (register commands, user enters
    "!command" and handler hits) come to mind.
  * Consider allowing a default of :incoming_xxx on callback, since those are only allowed for
    incoming events, and even filters so only outgoing filters require explicit :outgoing_xxx
    * Re-consider functional semantics like "before_say_xxx ..." for :outgoing_xxx filter, etc. -
      less work for user than "add_before_filter(:outgoing_xxx ..."
      * Filters: sending_xxx, sent_xxx, hearing_xxx, heard_xxx - not perfect, but somewhat intuitive
      * Callback is easy: handle_xxx - THERE CAN BE ONLY ONE
* Allow user to specify some way to decide when to call parent event handler
  * Use cases:
    * User may register :incoming_msg handler and doesn't want to handle ctcp and action
      * (today's YAIL acts this way - all events must be explicitly handled)
    * User registers :incoming_ctcp and forever wants all children of that type to propagate up
      * (today's YAIL has no way to do this)
  * User registers events whose children always propagate up.
    * Event parser builds events in a double-linked-list structure so it can register only the
      parent, and we can travel *down* from there.
* New dispatch routine for above two ideas, called by process_input:
  * Create dispatch() method.  For 1.5, this calls handle() after callbacks but before after-
    callback filters.  Later, handle() just disappears, along with prepend_handler, etc.
  * Code:
        def dispatch(event)
          if (event.child.nil? || propagation.include?(event.type))
            call_before_filters(event)
            call_handler(event)
            legacy_handler(event)  # this will house the legacy logic currently living in process_input
            call_after_filters(event)
            return
          end
          dispatch(event.child);
        end
* Build an event object for outgoing event handlers.  This may not
  ever really be necessary, as outgoing events have very specific arguments
  and the handling of events isn't nearly as commonplace as handling incoming
  events.
  * Needs to be done anyway - deprecating the arg-passing system requires that *all* events have
    some object behind them.
* Reporting should be an optional plugin *at most*.  Not required, and not part of the normal event
  chain.  Post-event filters would be okay if they were all registered in an optional library the
  user has to explicitly opt for.

Version 2.0
===========

When ready to change the API in a major way

* Remove prepend_handler completely, remove all legacy code supporting it.

Low priority
============

Someday....

* Allow multiple targets / hostmask / etc in outgoing PRIVMSG and NOTICE
* Allow incoming PRIVMSG to have multiple parts - :actor PRIVMSG victim :Hello there, sir!\001USERINFO\001
  * Allow IncomingEvent.parse to actually return multiple events?  Would help with modes, too.
  * Add special handlers for some of this stuff so it's not up to user to parse.
    :incoming_userinfo, :incoming_version, :outgoing_userinfo, etc.
* Allow for CTCP quoting/dequoting...?  Don't know much about this - read up!
* CTCP formatting:
  * Color is ^C<fore>[,<back>]
  * Bold is ^B to toggle on or off
  * See silverplatter - appears to have all formatting options I'd want.
    Yay theft!
  * Use *optional* output filtering to allow pipe-commands, such as
    "|2,3|BFoo|PBar" => bolded blue on green "Foo", followed by plain "Bar"
* CTCP commands (VERSION, PING, etc): http://www.invlogic.com/irc/ctcp.html
* Figure a nice way to do better throttling for output.  If there are enough
  channels or people bugging a bot, it could spam itself off the network right
  now due to the "send one message per second... to every damn thing that has
  something in its queue" rule.
