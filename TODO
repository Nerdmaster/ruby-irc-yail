Pull in 2.0 stuff as much as possible into 1.3.x - we can do a lot of the event object items (without
actually changing the API) to get prepared.  Need to make things a lot closer so the two can live together
better.

Merge in any differences that are needed from TODO.patch!




==High priority

Stuff to do soon

* Restructure events to have a forced before- and after-event handler list.  When an event happens,
  first run all before-event handlers, then normal handlers, then after-event handlers.
* Get YAIL using Event class for parsing all data.  First step toward passing around the event as
  an object is to use it for parsing....
* Get YAIL set up to use Event parent for all user handlers (before/after handlers must be exact
  since they'll only be internal handlers) when user doesn't have a handler for low-level event
  (:incoming_act => :incoming_ctcp => :incoming_msg, for instance)
* Reporting should be an optional plugin *at most*.  Not required, and not part of the normal event
  chain.  Post-event handlers would be okay if they were all registered in an optional library the
  user has to explicitly opt for.
* Make non-event reporting more of a real log (use Ruby's Logger class, even).  Most current
  reporting would be of "INFO" level, with the "if @loud" type of options being "DEBUG".  This
  gives users of the library a whole lot more control.  Default will still be stdout, and logging
  will be set to ERROR on @silent option, INFO with no specific option, and DEBUG on @loud option.
  * This magically makes the handlers one step closer to "real" handlers, as you aren't returning
    true and false depending on whether you want logging.
* Rename "handle" to "dispatch"?

==Low priority

Stuff that should happen for the most part, but needs to wait until above
stuff is done.

* Fix events to give more useful output for :incoming_mode events - at the least, parse out the
  various targets as some kind of hash.  Very complex mode-parsing may be necessary.
  For the command ":User!foo@bar.com MODE #bots +bivk-mv Towelie!*@* Doogles foo Towelie"
  * User is banning Towelie!*@*
  * User is setting "+i" to #bots
  * User is giving Doogles +v
  * User is setting channel key to "foo"
  * User is setting "-m" on #bots
  * User is taking away Towelie's voice (-v)
* Eventually build an event object for outgoing event handlers.  This may not
  ever really be necessary, as outgoing events have very specific arguments
  and the handling of events isn't nearly as commonplace as handling incoming
  events.
* Allow multiple targets / hostmask / etc in outgoing PRIVMSG and NOTICE
* Allow incoming PRIVMSG to have multiple parts - :actor PRIVMSG victim :Hello there, sir!\001USERINFO\001
  * Allow IncomingEvent.parse to actually return multiple events?  Would help with modes, too.
  * Add special handlers for some of this stuff so it's not up to user to parse.
    :incoming_userinfo, :incoming_version, :outgoing_userinfo, etc.
* Allow for CTCP quoting/dequoting...?  Don't know much about this - read up!
* New API for handlers - keep old because it's still useful
  * said_xxx {|args| do_stuff} => same as prepend_handler(:outgoing_xxx)
  * heard_xxx {|args| do_stuff} => same as prepend_handler(:incoming_xxx)
* CTCP formatting:
  * Color is ^C<fore>[,<back>]
  * Bold is ^B to toggle on or off
  * See silverplatter - appears to have all formatting options I'd want.
    Yay theft!
  * Use *optional* output filtering to allow pipe-commands, such as
    "|2,3|BFoo|PBar" => bolded blue on green "Foo", followed by plain "Bar"
* CTCP commands (VERSION, PING, etc): http://www.invlogic.com/irc/ctcp.html
* Figure a nice way to do better throttling for output.  If there are enough
  channels or people bugging a bot, it could spam itself off the network right
  now due to the "send one message per second... to every damn thing that has
  something in its queue" rule.
